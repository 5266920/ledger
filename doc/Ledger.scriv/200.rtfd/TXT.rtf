{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf460
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl264\slmult1\ql\qnatural\pardirnatural

\f0\fs28 \cf0 In the Ledger tarball is an Emacs module, @file\{ledger.el\}.  This\
module makes the process of keeping a text ledger much easier for\
Emacs users.  I recommend putting this at the top of your ledger file:\
\
@example\
; -*-ledger-*-\
@end example\
\
And this in your @file\{.emacs\} file, after copying @file\{ledger.el\} to\
your @file\{site-lisp\} directory:\
\
@example\
(load "ledger")\
@end example\
\
Now when you edit your ledger file, it will be in\
@command\{ledger-mode\}.  @command\{ledger-mode\} adds these commands:\
\
@table @strong\
@item C-c C-a\
For quickly adding new transactions based on the form of older ones (see\
previous section).\
\
@item C-c C-c\
Toggles the ``cleared'' flag of the posting under point.\
\
@item C-c C-d\
Delete the transaction under point.\
\
@item C-c C-r\
Reconciles an account by displaying the postings in another\
buffer, where simply hitting the spacebar will toggle the pending flag\
of the posting in the ledger.  Once all the appropriate\
postings have been marked, press C-c C-c in the reconcile buffer\
to ``commit'' the reconciliation, which will mark all of the transactions\
as cleared, and display the new cleared balance in the minibuffer.\
\
@item C-c C-m\
Set the default month for new transactions added with C-c C-a.  This is\
handy if you have a large number of postings to enter from a\
previous month.\
\
@item C-c C-y\
Set the default year for new transactions added with C-c C-a.  This is\
handy if you have a large number of postings to enter from a\
previous year.\
@end table\
\
Once you enter the reconcile buffer, there are several key commands\
available:\
\
@table @strong\
@item RET\
Visit the ledger file transaction corresponding to the reconcile transaction.\
\
@item C-c C-c\
Commit the reconcialation.  This marks all of the marked postings\
as ``cleared'', saves the ledger file, and then displays the new\
cleared balance.\
\
@item C-l\
Refresh the reconcile buffer by re-reading postings from the\
ledger data file.\
\
@item SPC\
Toggle the posting under point as cleared.\
\
@item a\
Add a new transaction to the ledger data file, and refresh the reconcile\
buffer to include its postings (if the transaction is added to the same\
account as the one being reconciled).\
\
@item d\
Delete the transaction related to the posting under point.  Note: This\
may result in multiple postings being deleted.\
\
@item n\
Move to the next line.\
\
@item p\
Move to the previous line.\
\
@item C-c C-r\
@item r\
Attempt to auto-reconcile the postings to the entered balance.  If\
it can do so, it will mark all those postings as pending that\
would yield the specified balance.\
\
@item C-x C-s\
@item s\
Save the ledger data file, and show the current cleared balance for\
the account being reconciled.\
\
@item q\
Quit the reconcile buffer.\
@end table\
\
There is also an @command\{emacs\} command which can be used to output\
reports in a format directly @code\{read\}-able from Emacs Lisp.}