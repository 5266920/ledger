LEDGER  -*- mode: org; fill-column: 78 -*-

#+STARTUP: content
#+SEQ_TODO: TODO(@) STARTED(@) WAITING(@) DELEGATED(@) DEFERRED(@) | DONE(@) CANCELLED(@) WONTFIX(@) WORKSFORME(@) INVALID(@) DUPLICATE(@) CLOSED(@) TESTED(@) NOTE
#+TAGS: LINK(l)
#+DRAWERS: PROPERTIES LOGBOOK OUTPUT SCRIPT SOURCE
#+CATEGORY: Ledger

* Features
** DEFERRED Support debit/credit register and balance reports
   - State "DEFERRED"   from "TODO"       [2009-11-25 Wed 02:33]
   - Note taken on [2009-11-25 Wed 02:11] \\
     See: http://en.wikipedia.org/wiki/Debits_and_credits#.27T.27_Accounts.
   This would show debit amounts in one column, and credit amounts in a second
   column, rather than conflating positive and negative values in a single
   column.
   :PROPERTIES:
   :ID:       A3A7E04A-036F-498D-8C7D-FCE38DC858BF
   :END:
   [2009-11-25 Wed 02:09]
** DEFERRED Have an option for showing all amounts in the print report
   - State "DEFERRED"   from "TODO"       [2009-11-25 Wed 02:34]
   :PROPERTIES:
   :ID:       7B8B33B7-925A-497E-A08A-D0B67E433FF6
   :END:
   [2009-11-25 Wed 00:27]
** DEFERRED Add the ability to have "typed" metadata
   - State "DEFERRED"   from "TODO"       [2009-11-11 Wed 04:37]
   For example, a metadata property that contains a date, which could then be
   used to generate reports from.
   :PROPERTIES:
   :ID:       D919FE3B-3FA9-4E9D-B3F5-42A9BD33A2C4
   :END:
   [2009-11-11 Wed 04:28]
** DEFERRED Add a "date" term to report queries
   - State "DEFERRED"   from "TODO"       [2009-11-06 Fri 01:55] \\
     This has been coded, but is not being enabled yet until I see that it has some
     value.
   :SCRIPT:
   ledger reg checking show date "june last year"
   :END:
   Write a compliance test to make sure that "june last year" (with --now) and
   "june 2009" do what's expected.  Make ~ be the shortcut key, with parsing
   behavior similar to =.
   :PROPERTIES:
   :ID: BBBD2434-3763-45DB-A8EC-59DD47B3E387
   :END:
   [2009-11-04 Wed 16:27]
** DEFERRED Restore the XML parser (code is in xml local branch)
   - State "DEFERRED"   from "TODO"       [2009-10-27 Tue 19:15]
   :PROPERTIES:
   :ID: 5332850A-B67B-4CF2-B553-BFA23EA9DB6F
   :END:
   [2009-10-25 Sun 22:47]
** DEFERRED Allow reading an encrypted ledger file directly
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:00]
   This would be done using libgpg.
   :PROPERTIES:
   :ID: 58512060-B3DD-438D-9BFE-D64D5DB9439B
   :END:
   [2009-10-23 Fri 06:13]
** DEFERRED Make a curses or http GUI for Ledger
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:00] \\
     This is waiting for either the new Emacs rewrite, or the Python support code.
   :PROPERTIES:
   :ID: 8716A41C-3570-4193-A95D-9829F4FF8798
   :END:
   [2009-10-23 Fri 06:13]
** DEFERRED Create new files for commodity_pool and annotated commodities
   - State "DEFERRED"   from "TODO"       [2009-06-16 Tue 18:12]
   :PROPERTIES:
   :ID: BAE2292F-6B8B-4703-A6B6-8217390673DC
   :END:
   [2009-02-07 Sat 18:20]
** DEFERRED Support for exceptions to interval_t
   - State "DEFERRED"   from "TODO"       [2009-06-16 Tue 18:13]
   For example, "monthly except June".
   :PROPERTIES:
   :Version: 2.6
   :Ticket: 147
   :ID: A8AC5063-AB2F-4031-8821-2084B7B6497C
   :END:
   [2008-04-11 Fri]
** DEFERRED Add complete calculation history in Ledger
   - State "DEFERRED"   [2009-02-24 Tue 04:00]
   :PROPERTIES:
   :Version: 2.6
   :Ticket: 146
   :ID: B1F0071C-BD7D-4311-8DF2-7868F9CA7A29
   :END:
** DEFERRED Annotations should allow for HH:MM:SS
   - State "DEFERRED"   [2009-02-24 Tue 04:02]
   And also datetime should display this if it's there (but not if it's
   midnight).

   To implement this, add a parsing option that if, before the code, there is a
   string fitting HH:MM:SS, then it is taken to be a time value.  This will
   require making the parsing of date_t and datetime_t flexible and adaptive
   (and stream-based).
   :PROPERTIES:
   :Version: 2.6
   :Ticket: 149
   :ID: F7DDD7D6-D219-4645-BB02-33AF74BED44B
   :END:
   [2008-04-11 Fri]
** DEFERRED In the equity report, if the "collapse" option is used ...
   - State "DEFERRED"   [2009-02-24 Tue 04:04]
   ... output only one entry.  Otherwise, output an entry for every top-level
   account.
   :PROPERTIES:
   :Version: 2.6
   :Ticket: 111
   :ID: 29D7E913-1A5C-4ED2-8AB8-53D895021615
   :END:
   [2008-04-11 Fri]
** DEFERRED Performance in forecasting would be weak with a lot of period xacts
   - State "DEFERRED"   [2009-02-24 Tue 04:05]
   What happens to performance with lots of accounts, of commodities?
   :PROPERTIES:
   :Version: 2.6
   :Ticket: 115
   :ID: 68E4C919-14BA-4AB1-A60B-FC176E966B45
   :END:
   [2008-04-11 Fri]
** DEFERRED Greatly improve Ledger's help system
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:05]
   :PROPERTIES:
   :ID: 2E0D3A34-41DF-470C-8A2D-0A66B1DAA6E9
   :END:
   [2009-02-04 Wed 19:57]
** DEFERRED When abbreviating account names, expand to fill
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:05]
   For example, Assets:NRL:Checking in 15 chars should be:
     As:NRL:Checking
   The algorithm should only shorten the initial account names as much as
   needed, giving any surplus to the penultimate member.
   :PROPERTIES:
   :ID: 9135540C-C5F5-460B-AAEC-10D07FB67C21
   :END:
   [2009-10-24 Sat 19:19]
** DEFERRED Support alert warnings in Ledger
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:05]
   Like if expenses during a given month are too high.  This could be
   implemented using automated transactions with a "warn" function as the
   amount of a bogus account.
   :PROPERTIES:
   :ID: 28BD75AE-219C-4DF5-9D19-E7774BFC8DED
   :END:
   [2009-10-23 Fri 06:12]
** DEFERRED Check for duplicated transactions
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:05]
   Either by date/payee/magnitude, or even payee/magnitude if --strict is on.
   :PROPERTIES:
   :ID: 4F58ACC1-498A-41A5-9164-93CD30B3CAC5
   :END:
   [2009-10-23 Fri 06:12]
** DEFERRED Allow for payee name mappings
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:05]
   After, create an "unaccounted" report for payees unknown to the matcher
   :PROPERTIES:
   :ID: 144F519E-9441-4FBA-9F6A-6757CA3F704A
   :END:
   [2009-10-23 Fri 06:14]
** DEFERRED Create an operator for value + post
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:05]
   :PROPERTIES:
   :ID: 28CE49A7-919B-4C93-9754-966DCC435DBA
   :END:
   [2009-10-23 Fri 06:14]
** DEFERRED @@ -- allow negative costs							   :LINK:
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:05]
   I am quite keen on the @@ syntax, as I like to deal with commodities on a
   net basis. However, there is a bit of an inconsistency between @@ and @.
 
   Suppose I have the ledger file:
   :DATA:
2008/01/01 * Purchase Apple shares
       Equities        1000 AAPL @ $2
       Cash

2008/06/30 * Sell some Apple shares
       Equities        -500 AAPL @ $2.5
       Cash
   :END:
   If I type:
   :SCRIPT:
ledger -f example01.txt -jB reg Equities
   :END:
   I get the output:
   :OUTPUT:
2008-01-01 2000
2008-06-30 -1250
   :END:
 
   The above is correct. $2000 goes in as equities as an asset, and Â£1250 is
   marked as a negative, thereby reducing the equity balance.
 
   Now. Suppose I decide I would rather use the @@ command. I would have a
   ledger file:
   :DATA:
2008/01/01 * Purchase Apple shares
   Equities    1000 AAPL @@ $2000
   Cash

2008/06/30 * Sell some Apple shares
   Equities    -500 AAPL @@ $1250
   Cash
   :END:
   If I type:
   :SCRIPT:
ledger -f example01.txt -jB reg Equities
   :END:
   I now get the output:
   :OUTPUT:
2008-01-01 2000
2008-06-30 1250
   :END:
 
   The above is incorrect, because the +1250 has changed to -1250. It implies
   the purchase of shares, rather than a sale. I can't just change the $1250 to
   -$1250 in the ledger file, either, because it complains:
   :OUTPUT:
Error: A posting's cost may not be negative
   :END:
   :PROPERTIES:
   :Submitter: Mark Carter <alt.mcarter@googlemail.com>
   :Message: [[message://62f2a66e0903280703g1826cc25u19cca48606e4e40@mail.gmail.com][RFE: @@ - allow negative costs]]
   :ID: 4F81E261-E6C6-401B-B6CA-0B356072D770
   :END:
   [2009-04-01 Wed 18:52]
** DEFERRED The CSV report should optionally generate a "title line"
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:06]
   :PROPERTIES:
   :ID: 65B7E207-1BCC-4448-881C-1574623346D7
   :END:
   [2009-03-03 Tue 21:49]
** DEFERRED Add a feature for "object descriptions"
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:06]
   For example:

   def OBJECT NAME
     alias NAME
     commodities NAME[, NAME...]
     report NAME[, NAME...]
     set NAME EXPR
     assert EXPR
   end def

   def commodity GAL
     set fixed_commodity true
     set another_value $100 * 20
   end def

   def account Expenses:Food
     alias Chow
     commodities $, EUR
     report $
   end def
   :PROPERTIES:
   :ID: B4BD2B5F-1F77-449B-80FF-DC7218DA2EFE
   :END:
   [2009-03-02 Mon 20:39]
** DEFERRED Make alias names for directives, like convert for C
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:06]
   :PROPERTIES:
   :ID: BD78C023-BB16-446C-9347-2F1AA16C7C5C
   :END:
   [2009-02-27 Fri 15:35]
** DEFERRED Add support for command aliases, to allow "canned reports"
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:06]
   :PROPERTIES:
   :ID: ADD3FB96-D19A-47F0-9F0B-1896328D6380
   :END:
   [2009-02-04 Wed 19:57]
** DEFERRED --price option in lot_sales branch						   :LINK:
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:06]
   message://m24q2rwrym.fsf_-_@newartisans.com
   message://m2k6bl3vr3.fsf@newartisans.com
   :PROPERTIES:
   :Version: 2.6
   :Ticket: 172
   :ID: F6120E58-8985-4D76-908B-93A319E6D1D1
   :END:
   [2008-04-11 Fri]
** DEFERRED Add an entry type for specifying value constraints
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:06]
   I'd like to see a more general syntax for this based on value expressions,
   which would offer a full constraints mechanism.  For example, to constrain
   all transactions to being less than $10,000 in an account:
   :DATA:
? Constrain all transactions to less than $10,000
  /Expenses:Food/      a < $10,000
   :END:

   The "?" indicates a "constraints entry".  Each transaction would have two
   value expressions: one to match every applicable transaction in the file,
   and another to provide the boolean logic of the constraint.
 
   Then, while the file is being parsed, any violations of a constraint would
   be treated as an error, the same as when an entry fails to balance to zero.
   I suppose making these warnings could be a possibility as well.
 
   Here is how you'd constrain commodities in this model:
   :DATA:
? Guarantee commodities within accounts
  Assets:Checking    comm(a) == $1.00
   :END:
 
   (At the moment there is no value expr function that would allow: comm(a) ==
   "$")
 
   Then, of course, there could be a specific declaration option -- such as you
   have above -- for just this case, which internally would be parsed as a
   constraints entry.
   :PROPERTIES:
   :Version: 2.6
   :Ticket: 39
   :ID: 31E75D27-157E-452B-B817-7AD570AFE357
   :END:
   [2008-04-05 Sat]
** DEFERRED Add a {{total}} syntax for lot price specification
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:06]
   I had another idea: do you remember I mentioned a problem I had, which that
   some of my trade confirmation slips provide the "adjusted cost base" and not
   the cost-per-share? This makes it a big ugly to enter such postings, even
   with expressions:
   :DATA:
     BrokerAccount    -29.435 WIDGETS {353.51435/29.435 USD} @ 13.02 USD
   :END:
   (I didn't test the above, by the way, that was your suggestion when we
   talked last time.)

   I propose this syntax:
   :DATA:
     BrokerAccount    -29.435 WIDGETS {{353.51435 USD}} @ 13.02 USD
   :END:
   It's a bit similar to the idea of @ vs. @@ where the single char (@) is for
   price, and the double (@@) is for total amount. Using {{ ... }} refers to
   the total cost, while { ... } refers to the cost price (per share).
   :PROPERTIES:
   :Submitter: Martin Blais <blais@furius.ca>
   :Version: 2.6
   :Ticket: 188
   :ID: C9E09993-CC01-41C6-BADC-0A9AA1221419
   :END:
   [2008-04-20 Sun]
** DEFERRED Allow forecasting from a specific date
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:06]
   This would make it possible to see expected vs. actual cash flows, for
   example, if the date chosen is before the end of actual transactions.  Kind
   of like a modified version of budgeting.
   :PROPERTIES:
   :Version: 2.6
   :Ticket: 94
   :ID: BBD4F6F0-1250-4216-BB0E-3E86785D5E44
   :END:
   [2008-04-11 Fri]
** DEFERRED Option --bold-if
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:06]
   Which will bold the whole transaction line if it matches the given predicate
   :PROPERTIES:
   :Version: 2.6
   :Ticket: 154
   :ID: 3D04C70F-422D-4CEC-BC4A-B177C76D834A
   :END:
   [2008-04-11 Fri]
** DEFERRED [#C] Implement readline completion for the REPL
   - State "DEFERRED"   from "TODO"       [2009-11-07 Sat 06:31]
   [[file:main.cc::jww%202009%2002%2005%20NYI][NYI]]
   :PROPERTIES:
   :ID: EF3D6703-AD14-48B3-A9EE-481E5FC295AB
   :END:
   [2009-11-03 Tue 13:59]
** DEFERRED [#C] Warn if a file link points to a missing file
   - State "DEFERRED"   from "TODO"       [2009-11-07 Sat 06:24]
   :PROPERTIES:
   :ID: 232CCAA9-77C3-4541-B894-7F0CA9A7747B
   :END:
   [2009-11-02 Mon 15:50]
** DEFERRED [#C] journal_t objects should be copyable
   - State "DEFERRED"   from "TODO"       [2009-11-07 Sat 06:23]
   This also has to do with making them serializable.  There should be a way to
   "activate" a journal for the current session, which sets up the
   commodity_pool reference for amount_t.
   :PROPERTIES:
   :ID: 9ECF98A8-8C8C-42D1-B8A0-EB42F49AAED9
   :END:
  
** DEFERRED [#C] Combine a random seed when hashing when using --anon			   :LINK:
   - State "DEFERRED"   from "TODO"       [2009-10-29 Thu 01:00]
   Please keep in mind that the dictionary one pulls account names from is MUCH
   smaller than the dictionary of valid ASCII strings.  Given the SHA-1 hash of
   a string $foo, it is easy to tell if this is the hash of "Bar, Inc." or
   "Baz, Inc.".  So, while in theory it is hard to reverse, it becomes very
   easy in practice if I know anything about your company or even the language
   that the accounts will be in.  Finally, because of rainbow tables, these
   might even be easy to reverse without knowing anything about the target
   company.
   :PROPERTIES:
   :Submitter: Anthony Chivetta <anthony@chivetta.org>
   :ID: 03DA2F5B-9E0C-4E3B-B19D-531A4F77C050
   :Message: [[message://20090703063943.GB16282@chivetta.org][Re: sample ledgers and anonymising]]
   :END:
   [2009-07-03 Fri 08:38]
* Emacs
** DEFERRED Add colorized highlighting to the reconciler				   :LINK:
   - State "DEFERRED"   from "TODO"       [2009-10-31 Sat 05:05]
   http://thread.gmane.org/gmane.comp.finance.ledger.general/483
   :PROPERTIES:
   :ID: C7E28F7F-93F9-4C3F-956A-4F4B84868CBF
   :END:
   [2009-10-31 Sat 00:06]
** DEFERRED Redesign ledger.el
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:03]
   It should always be talking with Ledger via the REPL.
   :PROPERTIES:
   :ID: BADF02BF-CAA1-4990-B9FF-DA20BA025FE0
   :END:
   [2009-10-23 Fri 06:11]
** DEFERRED Add folding support to ledger.el
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:03]
   - State "TODO"       from "DELEGATED"  [2009-10-22 Thu 06:46]
   - State "DELEGATED"  from "TODO"       [2009-10-11 Sun 05:31] \\
     Demosthenes said that the author of loccur was going to look into this.
   For example, show only transactions matching a given report query.
   :PROPERTIES:
   :ID: E98B3CBD-B76F-4917-92A5-4B9E69833131
   :END:
   [2009-10-06 Tue 17:29]
** DEFERRED C-c C-c should be magical in ledger-mode
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:03]
   It should auto-generate reports, for example, if the user does it in an
   account or payee name.
   :PROPERTIES:
   :ID: 5C52F851-18CF-41A3-953B-49DA4EF67C00
   :END:
   [2009-10-23 Fri 06:12]
** DEFERRED Break ledger.el up into sections
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:03]
   - Font-locking
   - REPL interaction
   - Parsing
   - Utility functions
   - Manipulation (sorting, etc)
   - Reconciling
   - Reports
   :PROPERTIES:
   :ID: 770D07CF-9F28-4A9B-B4E8-48ACC4926E06
   :END:
   [2009-10-23 Fri 06:12]
** DEFERRED Create a hotkey for creating Ledger transactions
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:03]
   :PROPERTIES:
   :ID: CAAE8C68-A26F-4BED-A626-751A98B57E7E
   :END:
   [2009-10-23 Fri 06:13]
** DEFERRED Make TAB more magical in ledger-mode
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:03]
   It should do what C-c TAB does, but still cycle.  Or, it should move around.
   Or, if in payee and preceding char is a digit, call ledger xact.
   :PROPERTIES:
   :ID: 2A9F5DDB-4DB6-4E87-A755-392F51CF0C2D
   :END:
   [2009-10-23 Fri 06:13]
** DEFERRED Use yasnippet with ledger-mode
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:03]
   :PROPERTIES:
   :ID: 178EC4C8-F87A-40C2-91CE-C5BD9CA50BD3
   :END:
   [2009-10-23 Fri 06:14]
** DEFERRED Inserting comments in ledger-mode is inserting leading whitespace		   :LINK:
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:03]
   Comments in ledger-mode are inserted with whitespace at the beginning of the
   line, which makes ledger.dat unusable.  One has to delete the extra
   whitespace manually afterwards.
   :OUTPUT:
do! ledger bal bank
Error: "ledger.dat", line 341: Line begins with whitespace
Error: "ledger.dat", line 342: Line begins with whitespace
Error: "ledger.dat", line 343: Line begins with whitespace
   :END:
   :PROPERTIES:
   :Submitter: Henry Atting <nsmp_01@online.de>
   :Message: [[message://87y6ukqwyy.fsf@online.de][inserting comments in ledger-mode ]]
   :ID: BEBC59BB-C7FF-4295-9EE5-171354CCEBBC
   :END:
   [2009-04-01 Wed 18:57]
** DEFERRED Allow reconciling postings in multiple included files
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:03]
   :PROPERTIES:
   :ID: 29AC8129-C451-4782-8371-B74588609E9F
   :END:
   [2009-03-03 Tue 00:10]
** DEFERRED ledger.el should define its own faces
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:03]
   This would allow people to describe how they want cleared and uncleared
   payee names to appear.
   :PROPERTIES:
   :Submitter: John Wiegley <johnw@newartisans.com>
   :Version: 2.6.1
   :Milestone: 3.0
   :Ticket: 2
   :ID: 78B2F4A4-DCE5-1B40-9C21-86195584ACF1
   :END:
   [2009-03-01 Sun 01:08]
** DEFERRED Allow for quicker reporting commands in ledger.el
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:04]
   :PROPERTIES:
   :Version: 2.6
   :Ticket: 117
   :ID: 932324E2-4A3F-4319-9586-1F33DFE29527
   :END:
** DEFERRED Have ledger.el warn if the ledger version is too old
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:04]
   :PROPERTIES:
   :Version: 2.6
   :Ticket: 163
   :ID: 5F20A546-046B-4CC6-B1EF-89C5962B55BE
   :END:
   [2008-04-11 Fri]
** DEFERRED Highlight transaction lines based on their status
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:04]
   Here is a tweak to ledger-mode that I find useful. It makes uncleared lines
   pink and cleared lines green. C-c C-e to toggle the status.
   :SCRIPT:
(add-hook 'ledger-mode-hook (lambda ()
                             (highlight-lines-matching-regexp "^..\\(..\\)?/..?/..?[ 	]+[^\\*]" (quote hi-pink))
                             (highlight-lines-matching-regexp "^..\\(..\\)?/..?/..?[ 	]+\\*" (quote hi-green))))
   :END:
   :PROPERTIES:
   :Version: 2.6
   :Ticket: 200
   :ID: 1C870658-6460-423C-9199-E46C48074688
   :END:
   [2008-07-13 Sun]
** DEFERRED Fix toggle-current-transaction
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:04]
   When all transactions have been cleared, the marks should be wiped and then
   ledger-toggle-current-entry called, rather than doing the entry clearing
   itself.
   :PROPERTIES:
   :Version: 2.6
   :Ticket: 130
   :ID: 465231DF-6EF2-4C4F-BF0D-9FED19AB99A3
   :END:
   [2008-04-11 Fri]
** DEFERRED Ledger-context-at-point fails to parse acct-transaction
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:04]
   - State "TODO"       [2007-11-07 Wed 04:06] \\
     Levin <zslevin@gmail.com> writes:
     > The following patch fixes problem of the amount with no ',':
     :PATCH:
@@ -648,10 +648,12 @@
        (indent account amount nil commodity comment))
       ("\\(^[ \t]+\\)\\(.*?\\)[ \t]+\\(-?[0-9]+\\(\\.[0-9]*\\)?\\)[ \t]+\\(.*?\\)[ \t]*$"
        (indent account amount nil commodity))
-      ("\\(^[ \t]+\\)\\(.*?\\)[ \t]+\\(-?\\(\\.[0-9]*\\)\\)[ \t]+\\(.*?\\)[ \t]*;[ \t]*\\(.*?\\)[ \t]*$"
+      ("\\(^[ \t]+\\)\\(.*?\\)[ \t]+\\(-?[0-9]+\\(\\.[0-9]*\\)?\\)[ \t]+\\(.*?\\)[ \t]*;[ \t]*\\(.*?\\)[ \t]*$"
        (indent account amount nil commodity comment))
-      ("\\(^[ \t]+\\)\\(.*?\\)[ \t]+\\(-?\\(\\.[0-9]*\\)\\)[ \t]+\\(.*?\\)[ \t]*$"
+      ("\\(^[ \t]+\\)\\(.*?\\)[ \t]+\\(-?[0-9]+\\(\\.[0-9]*\\)?\\)[ \t]+\\(.*?\\)[ \t]*$"
        (indent account amount nil commodity))
+      ("\\(^[ \t]+\\)\\(.*?\\)[ \t]+\\(-?[0-9]+\\(\\.[0-9]*\\)?\\)[ \t]*$"
+       (indent account amount nil))
       ("\\(^[ \t]+\\)\\(.*?\\)[ \t]*;[ \t]*\\(.*?\\)[ \t]*$"
        (indent account comment))
       ("\\(^[ \t]+\\)\\(.*?\\)[ \t]*$"
     :END:
     > BTW, the amount regexp is a bit complex here. Do we need the fraction
     > part of the amount? And it should recognize the ',' in amount.
   Use the following ledger data
   :DATA:
2004/05/01 * Checking balance
  Assets:Bank:Checking        1000.00
  Equity:Opening Balances
   :END:

   With cursor on the beginning of the second line, eval
   `(ledger-context-at-point)`, which returns:
   :OUTPUT:
(acct-transaction account ((indent "  " 31) (account "Assets:Bank:Checking        1000.00" 33)))
   :END:
   It is not correct, since 1000.00 ought to be amount.
 
   ledger-context-at-point also fails to parse amount with ',' in it, such as:
   :DATA:
2004/05/01 * Checking balance
  Assets:Bank:Checking        $1,000.00
  Equity:Opening Balances
   :END:
   :PROPERTIES:
   :Submitter: Levin <zslevin@gmail.com>
   :Version: 2.6
   :Ticket: 6
   :ID: 2558642F-EE17-4DCB-B6DB-50490FB0CF83
   :END:
   [2007-11-07 Wed]
** DEFERRED Look at making ledger's new entry completion behavior cyclic
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:04]
   :PROPERTIES:
   :ID: B443E186-4E6F-4FB5-8421-4F703DC9353C
   :END:
   [2009-02-13 Fri 05:17]
** DEFERRED Make M-x ledger-sort work on the current region
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:04]
   :PROPERTIES:
   :ID: C390F6D0-FA81-4A1B-877A-C6946EA51105
   :END:
   [2009-01-29 Thu 19:36]
** DEFERRED Pressing C-c C-c on an entry line should clear it
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:04]
   :PROPERTIES:
   :ID: FEE28C4E-B113-4280-85F5-42E2B8EE603B
   :END:
   [2009-01-31 Sat 06:13]
** DEFERRED Use of ledger.el with various invalid "ledger" binaries (and none)
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:04]
   :PROPERTIES:
   :Version: 2.6
   :Ticket: 175
   :ID: 8735E6AB-DB0A-4F66-BD81-BBFFEE66A68E
   :END:
   [2008-04-11 Fri]
** DEFERRED Allow reports, such as completed tasks last week, etc.
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:04]
   :PROPERTIES:
   :ID: D9B4D001-21E4-4247-ADF6-56C00B2C8F3A
   :END:
   [2008-05-12 Mon]
** DEFERRED The Great Renaming still needs to take place in ledger.el
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:04]
   :PROPERTIES:
   :ID: 721AC8F7-9189-4151-8611-2BBC0D1E8267
   :END:
   [2009-06-19 Fri 00:49]
* Python
** DEFERRED Having problems exporting std::pair<T, U *> from Boost.Python
   - State "DEFERRED"   from "TODO"       [2009-11-25 Wed 02:36]
   This is the e-mail I was drafting for the mailing list, in response to
   [[message://770306.78630.qm@web111402.mail.gq1.yahoo.com][Re: {boost} Boost.Python question about converters and make_getter]]:

   Just one quick question:

   I have a Boost.Python method that looks like this:

     .def("__iter__", range<return_value_policy<return_by_value> >
	  (py_pool_commodities_begin, py_pool_commodities_end))

   Where the members of the map are std::pair<string, MyObject *>.  I want the
   pair passed by value, but I need the "second" member to be accessed using
   reference_existing_object.
   :PROPERTIES:
   :ID:       50EA95EE-E17A-444C-84BE-123F080811FA
   :Message:  [[message://0B5E0EBA-E74E-4303-A6FC-3CBA42B7055B@gmail.com][Re: {boost} Boost.Python question about converters and make_getter]]
   :END:
   [2009-11-24 Tue 22:18]
** DEFERRED After using python/server.py, it segfaults on exit
   - State "DEFERRED"   from "TODO"       [2009-11-22 Sun 22:36]
   :PROPERTIES:
   :ID:       DA30D886-863D-4173-AE3C-369A98F0CD59
   :END:
   [2009-11-21 Sat 02:20]
** DEFERRED Write a Python demo script
   - State "DEFERRED"   from "STARTED"    [2009-11-22 Sun 22:36]
   :PROPERTIES:
   :ID:       9F26072D-C8E1-49CB-BF28-E2D32B170108
   :END:
   [2009-11-19 Thu 17:37]
** DEFERRED Allow to_xml methods on all Python-exposed objects
   - State "DEFERRED"   from "TODO"       [2009-11-22 Sun 22:36]
   :PROPERTIES:
   :ID:       0EDDE812-2913-4D16-BF2E-9C343F32A958
   :END:
   [2009-11-19 Thu 17:38]
** DEFERRED Do a complete review of all the Python bindings
   - State "DEFERRED"   from "TODO"       [2009-11-12 Thu 05:26]
   Looking for correctness, consistency, and rationality of interfaces.
   :PROPERTIES:
   :ID:       DFC8101B-CB9D-4522-8B93-F7546183BB66
   :END:
   [2009-11-11 Wed 21:38]
** DEFERRED Standardize the find_account and find_commodity methods
   - State "DEFERRED"   from "TODO"       [2009-11-12 Thu 05:26]
   It should be find_account(STR), find_account(MASK), and
   find_or_create_account(STR).  Some with find_commodity, etc.
   :PROPERTIES:
   :ID: BC6E6475-14C8-4E20-BF4E-0A0FAD36F01D
   :END:
   [2009-11-05 Thu 16:11]
** DEFERRED Every ledger object should honor the iteration protocol
   - State "DEFERRED"   from "TODO"       [2009-11-12 Thu 05:26]
   - Note taken on [2009-11-07 Sat 06:20] \\
     The only ones left are balance_t and value_t.
   :PROPERTIES:
   :ID:       4E160265-93EA-42EE-825D-078A2A459BCA
   :END:
   [2009-11-02 Mon 15:50]
** DEFERRED Make sure I'm handling object lifetime correctly for Boost.Python		   :LINK:
   - State "DEFERRED"   from "TODO"       [2009-11-12 Thu 05:26]
   http://wiki.python.org/moin/boost.python/CallPolicy
   :PROPERTIES:
   :ID: D3727E42-6180-44F5-AD0B-651BAA822C8D
   :END:
   [2009-11-03 Tue 08:55]
** DEFERRED In py_report.cc, export all "global" functions
   - State "DEFERRED"   from "TODO"       [2009-11-12 Thu 05:26]
   Move as many of these functions as possible into their related class.  For
   example, scrub should go into value_t::scrub.
   :PROPERTIES:
   :ID: 0912FE8A-79BE-4A6A-9B0F-6A73547A9B2C
   :END:
   [2009-11-05 Thu 08:28]
** DEFERRED Allow a Python function to be used to download quotes
   - State "DEFERRED"   from "TODO"       [2009-11-12 Thu 05:27]
   - State "TODO"       from "DEFERRED"   [2009-11-05 Thu 04:23]
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:04]
   :PROPERTIES:
   :ID: 277ACB9A-9B43-4D3D-8BF9-D64CBCF3674A
   :END:
   [2009-06-24 Wed 17:27]
** DEFERRED Add implicit conversion of mask_t to re
   - State "DEFERRED"   from "TODO"       [2009-11-07 Sat 06:36]
   [[file:py_value.cc::jww%202009%2011%2002%20Add%20implicit%20conversion%20of%20mask%20objects][py_value.cc]]
   :PROPERTIES:
   :ID: DF00F985-18A8-438D-819C-EC5962EEE925
   :END:
   [2009-11-03 Tue 14:01]
** DEFERRED Get ledger python to run within the build tree
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:04]
   :PROPERTIES:
   :ID: 7274224C-3470-4A9F-B56E-A499F39E13C9
   :END:
   [2009-03-09 Mon 20:33]
** DEFERRED The error output when calling Python is out of order
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:04]
   :OUTPUT:
TypeError: No to_python (by-value) converter found for C++ type: ledger::value_t
While evaluating value expression:
  myvalue(23)
  ^^^^^^^^^^^
Error: While calling Python function 'myvalue'
   :END:
   This should be:
   :OUTPUT:
While evaluating value expression:
  myvalue(23)
  ^^^^^^^^^^^
While calling Python function 'myvalue':
Error: TypeError: No to_python (by-value) converter found for C++ type: ledger::value_t
   :END:
   :PROPERTIES:
   :ID: 7CF0160B-A3FF-4BE7-B6D3-788F9556A20F
   :END:
   [2009-01-23 Fri 15:57]
** DEFERRED Use Python to create a per-account debit/credit report
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 22:04]
   Is there a way to let ledger output its reports showing the accounts in the
   more conventional way as debit and credit accounts, instead of having a
   positive or negative saldo?
 
   Here is one example:
   :OUTPUT:
Assets:Bank
Tr.#	date		Text			debit		credit		saldo
1	2008-01-01	Mr. Sponsor		500				500
2	2008-01-02	Bill					100		400

Income:Donations
Tr.#	date		Text			debit		credit		saldo
1	2008-01-01	Mr. Sponsor				500		-500

Expenses:Electricity
Tr.#	date		Text			debit		credit		saldo
2	2008-01-02	Bill			100				100
   :END:
   There should be a way of distinguishing between debit accounts, as assets
   and expenses, and credit accounts, as Income and liabilities. It is of
   course possible to processs ledger's output to achieve this, but it would be
   nice if it could be done in ledger directly.
   :PROPERTIES:
   :Submitter: Christopher <christopher.illies@ki.se>
   :Version: 2.6.1
   :ID: 444EFEE1-D873-4FD3-BB07-4E605BCB2BF4
   :END:
   [2008-10-08 Wed 00:58]
** DEFERRED [#C] Have methods for serializing to and from a string
   - State "DEFERRED"   from "TODO"       [2009-11-07 Sat 06:23]
   [2009-11-03 Tue 07:41]
   :PROPERTIES:
   :ID: 9383A1B7-34C8-4B3E-8FA0-B22A92F6B10F
   :END:
   [2009-11-02 Mon 15:50]
* Build
** DEFERRED Add some more configure arguments
   - State "DEFERRED"   from "TODO"       [2009-10-31 Sat 03:15]
   ./configure .... with-gmp=...  with-mpfr= ... with-python=...
   :PROPERTIES:
   :ID: 070D3625-FCAE-44B0-B1B7-BFD6BAD4028D
   :END:
   [2009-03-26 Thu 02:09]
** DEFERRED Setup virtual machines for every OS Ledger should run on
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 19:16]
   :PROPERTIES:
   :ID: C91FEFD0-CF11-41C2-B2D0-B6BED7E142A2
   :END:
   [2009-10-08 Thu 17:12]
** DEFERRED Ledger 2.6 is not building on Debian 5 latest
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 19:16]
   :PROPERTIES:
   :ID: 427F8D8D-39CB-47ED-8438-BF07BBBE6672
   :END:
   [2009-04-24 Fri 17:13]
** DEFERRED Build .deb, .rpm, .exe (in .zip), and .pkg installs
   - State "DEFERRED"   from "TODO"       [2009-10-25 Sun 19:16]
   :PROPERTIES:
   :ID: 769BFB8F-F805-4510-ABF2-A933D0EDBE0C
   :END:
   [2009-01-29 Thu 19:40]
** DEFERRED Avoid having to rm -fr ledger-proof
   - State "DEFERRED"   from "TODO"       [2009-06-16 Tue 17:08]
   :OUTPUT:
acprep: INFO: === Wiping build directory /home/nafai/Products/ledger-proof/default ===
acprep: ERROR: Caught exception
Traceback (most recent call last):
  File "./acprep", line 141, in run
    exit_code = self.main(*main_args)
  File "./acprep", line 297, in main
    PrepareBuild.__dict__['phase_' + cmd](self, *args)
  File "./acprep", line 1239, in phase_proof
    self.configure_flavor('default')
  File "./acprep", line 1176, in configure_flavor
    shutil.rmtree(self.build_directory())
  File "/usr/lib/python2.5/shutil.py", line 175, in rmtree
    rmtree(fullname, ignore_errors, onerror)
  File "/usr/lib/python2.5/shutil.py", line 180, in rmtree
    onerror(os.remove, fullname, sys.exc_info())
  File "/usr/lib/python2.5/shutil.py", line 178, in rmtree
    os.remove(fullname)
OSError: [Errno 13] Permission denied: '/home/nafai/Products/ledger-proof/default/ledger-3.0/config.sub'
   :END:
   :PROPERTIES:
   :ID: 12D4AB31-964F-4206-8AA0-2CA9C509DA30
   :END:
   [2009-03-11 Wed 20:54]
* Tests
** DEFERRED Use --cache=/dev/null when running the unit tests
   - State "DEFERRED"   from "TODO"       [2009-11-06 Fri 02:08] \\
     I cannot read/write the cache to /dev/null, so I'll have to use a temp file
     that gets cleaned up.
   :PROPERTIES:
   :ID: 957CABA8-FEE1-4609-ABCD-0B285B49F2CE
   :END:
   [2009-11-03 Tue 18:55]
** DEFERRED [#C] Ledger is still failing the higher-numbered generation seed tests
   - State "DEFERRED"   from "TODO"       [2009-10-29 Thu 01:00]
   :PROPERTIES:
   :ID: B9C429C8-A894-48FE-9C8D-8068E2467D75
   :END:
   [2009-03-03 Tue 15:47]
** DEFERRED [#C] New tests to create for Ledger [0/3]
   - State "DEFERRED"   from "TODO"       [2009-10-26 Mon 21:54]
   - [ ] GarbageTests
	 Feed every one of the distribution's source files back to Ledger, to
         make sure it dies gracefully.
   - [ ] RandomTests
	 Feed random data (probably base64) both as options and input.
   - [ ] ScrambleTests
	 Pass random combinations of options.
   :PROPERTIES:
   :ID: F866DFA5-7350-45D3-BF76-286D68755A2A
   :END:
   [2009-02-27 Fri 16:19]
* Docs
** DEFERRED Complete the internal documentation, exported using Doxygen
   - State "DEFERRED"   from "TODO"       [2009-06-16 Tue 17:10]
   :PROPERTIES:
   :ID: 986054C6-CD18-4EA1-8F8C-FF02C9842EB0
   :END:
   [2008-08-14 Thu]
** DEFERRED [#C] Ledger example: building a better "du"				    :LINK:ATTACH:
   - State "DEFERRED"   from "TODO"       [2009-10-26 Mon 22:06]
   Since Ledger does not internally focus on finance, there is no reason why
   it can't be used in any situation where amounts are either kept in certain
   places, or moved from place to place, including:
   
   - tracking time
   - recording data transfers between computers
   - recording scientific data (converting any input to any output)
   - reporting on the layout of your hard drive
   
   To show an example of this, I'm written a Python script called "ledger-du"
   which simply outputs whatever directories you specify as arguments in the
   form of Ledger entries.  There is one entry per file, where the "payee" is
   the file name, the "account" is a colon-separated directory hierarchy, and
   the "date" is the last modified time of the file.
   
   By running this script and sending the output to "/tmp/out.dat", you can
   now perform some very sophisticated queries on your data -- including
   showing you the same kind of information that the venerable "du" itself
   would show.  Except that now you can see the tree hierarchy with the
   "balance" command, and other enhancements to the basic form of "du".
   
   For example, here's a command that shows me where all my C++ source files
   are, subtotaled by the sub-directory that contains them, and sorted by
   total size.  The "equity" account (where all the bytes are balanced) even
   ends up telling me the total size of all C++ files in my queried directory:
   :SCRIPT:
   ledger --format \
     "%D %-.20P\n  %-.52A %12.67t %12.80T\n%/  %-.52A %12.67t %12.80T\n" \
     -f /tmp/out.dat -s -S "-U(t)" register -- \\.cc\$
   :END:
   
   I specified a new format string here (a variation on the default balance
   format) so that I could see account totals each on their own line, since
   some of the account names get very long.
   :PROPERTIES:
   :Version:  2.6
   :Ticket:   169
   :ID:       85DAE1AB-F6D3-4AAC-A4F7-99D146B355E7
   :Message:  message://m2odzwxupz.fsf@newartisans.com
   :Attachments: ledger-du
   :END:
   [2006-03-24 Fri]
** DEFERRED [#C] Using Ledger as a scientific analysis tool
   - State "DEFERRED"   from "TODO"       [2009-10-26 Mon 22:06]
   :PROPERTIES:
   :Version: 2.6
   :Ticket: 173
   :ID: C653003E-52A8-4D06-9DEB-634B1156B04C
   :END:
** DEFERRED [#C] Using Ledger to track inventory
   - State "DEFERRED"   from "TODO"       [2009-10-26 Mon 22:06]
   :PROPERTIES:
   :Version: 2.6
   :Ticket: 174
   :ID: F7A6A833-5AC6-4ED0-A5EA-93CD6B97EEBF
   :END:
